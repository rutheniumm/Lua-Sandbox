local Module={}local Require=loadstring(game:GetService("HttpService"):GetAsync("https://raw.githubusercontent.com/rutheniumm/Lua-Sandbox/main/Importer.luau"))()local Neuron,Connection=Require("Neuron"),Require("Connection")local function Sigmoid(x)return 1/(1+math.exp(-x))end;local NeuralNetwork={}function NeuralNetwork.new(inputSize,hiddenSize,outputSize)local obj={inputSize=inputSize,hiddenSize=hiddenSize,outputSize=outputSize,neurons={},connections={}}setmetatable(obj,NeuralNetwork)NeuralNetwork.__index=NeuralNetwork;for i=1,inputSize+hiddenSize+outputSize do table.insert(obj.neurons,Neuron.new(i,0))end;return obj end;function NeuralNetwork:addNeuron(neuron)table.insert(self.neurons,neuron)end;function NeuralNetwork:addConnection(connection)table.insert(self.connections,connection)end;function NeuralNetwork:getInputNeurons()local inputNeurons={}for i=1,self.inputSize do table.insert(inputNeurons,self.neurons[i])end;return inputNeurons end;function NeuralNetwork:getOutputNeurons()local outputNeurons={}local totalNeurons=#self.neurons;for i=totalNeurons-self.outputSize+1,totalNeurons do table.insert(outputNeurons,self.neurons[i])end;return outputNeurons end;function NeuralNetwork:getHiddenNeurons()local hiddenNeurons={}local totalNeurons=#self.neurons;local startIdx=self.inputSize+1;local endIdx=totalNeurons-self.outputSize;for i=startIdx,endIdx do table.insert(hiddenNeurons,self.neurons[i])end;return hiddenNeurons end;function NeuralNetwork:getNeuron(id)for _,neuron in ipairs(self.neurons)do if neuron.id==id then return neuron end end;return nil end;function NeuralNetwork:setNeuron(id,value)local Neuron=self:getNeuron(id)Neuron.value=value end;function NeuralNetwork:getConnection(inputID,outputID)for _,connection in ipairs(self.connections)do if connection.inputID==inputID and connection.outputID==outputID then return connection end end;return nil end;function NeuralNetwork:forwardPropagation(inputs)local inputNeurons=self:getInputNeurons()local hiddenNeurons=self:getHiddenNeurons()local outputNeurons=self:getOutputNeurons()for i,inputNeuron in ipairs(self:getInputNeurons())do inputNeuron.value=inputs[i]end;local inputToHidden={}local hiddenToOutput={}for _,inputNeuron in ipairs(inputNeurons)do for _,hiddenNeuron in ipairs(hiddenNeurons)do local Connection=self:getConnection(inputNeuron.id,hiddenNeuron.id)if Connection then table.insert(inputToHidden,Connection)end end end;for _,hiddenNeuron in ipairs(hiddenNeurons)do for _,outputNeuron in ipairs(outputNeurons)do local Connection=self:getConnection(hiddenNeuron.id,outputNeuron.id)if Connection then table.insert(hiddenToOutput,Connection)end end end;for _,Connection in ipairs(inputToHidden)do local inputNeuron,outputNeuron=self:getNeuron(Connection.inputID),self:getNeuron(Connection.outputID)outputNeuron.value=Sigmoid(outputNeuron.value+Connection:activate(inputNeuron.value))end;for _,Connection in ipairs(hiddenToOutput)do local inputNeuron,outputNeuron=self:getNeuron(Connection.inputID),self:getNeuron(Connection.outputID)outputNeuron.value=Sigmoid(outputNeuron.value+Connection:activate(inputNeuron.value))end;return outputNeurons end;Module.Neuron=Neuron;Module.Connection=Connection;Module.NeuralNetwork=NeuralNetwork;return Module
